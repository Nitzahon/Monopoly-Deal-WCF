//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDWcfWFClient.MonopolyDealServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.CompositeType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Player))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Player[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Card[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Card))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Type))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid messageRespondingToGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] objectsInMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerSendingMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] playersRecievingMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool serviceSendingMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid thisMessageGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid messageRespondingToGuid {
            get {
                return this.messageRespondingToGuidField;
            }
            set {
                if ((this.messageRespondingToGuidField.Equals(value) != true)) {
                    this.messageRespondingToGuidField = value;
                    this.RaisePropertyChanged("messageRespondingToGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string messageType {
            get {
                return this.messageTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.messageTypeField, value) != true)) {
                    this.messageTypeField = value;
                    this.RaisePropertyChanged("messageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] objectsInMessage {
            get {
                return this.objectsInMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.objectsInMessageField, value) != true)) {
                    this.objectsInMessageField = value;
                    this.RaisePropertyChanged("objectsInMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerSendingMessage {
            get {
                return this.playerSendingMessageField;
            }
            set {
                if ((this.playerSendingMessageField.Equals(value) != true)) {
                    this.playerSendingMessageField = value;
                    this.RaisePropertyChanged("playerSendingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] playersRecievingMessage {
            get {
                return this.playersRecievingMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.playersRecievingMessageField, value) != true)) {
                    this.playersRecievingMessageField = value;
                    this.RaisePropertyChanged("playersRecievingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool serviceSendingMessage {
            get {
                return this.serviceSendingMessageField;
            }
            set {
                if ((this.serviceSendingMessageField.Equals(value) != true)) {
                    this.serviceSendingMessageField = value;
                    this.RaisePropertyChanged("serviceSendingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid thisMessageGuid {
            get {
                return this.thisMessageGuidField;
            }
            set {
                if ((this.thisMessageGuidField.Equals(value) != true)) {
                    this.thisMessageGuidField = value;
                    this.RaisePropertyChanged("thisMessageGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid cardGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid cardGuid {
            get {
                return this.cardGuidField;
            }
            set {
                if ((this.cardGuidField.Equals(value) != true)) {
                    this.cardGuidField = value;
                    this.RaisePropertyChanged("cardGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardID {
            get {
                return this.cardIDField;
            }
            set {
                if ((this.cardIDField.Equals(value) != true)) {
                    this.cardIDField = value;
                    this.RaisePropertyChanged("cardID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardName {
            get {
                return this.cardNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cardNameField, value) != true)) {
                    this.cardNameField = value;
                    this.RaisePropertyChanged("cardName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardText {
            get {
                return this.cardTextField;
            }
            set {
                if ((object.ReferenceEquals(this.cardTextField, value) != true)) {
                    this.cardTextField = value;
                    this.RaisePropertyChanged("cardText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string cardType {
            get {
                return this.cardTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.cardTypeField, value) != true)) {
                    this.cardTypeField = value;
                    this.RaisePropertyChanged("cardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardValue {
            get {
                return this.cardValueField;
            }
            set {
                if ((this.cardValueField.Equals(value) != true)) {
                    this.cardValueField = value;
                    this.RaisePropertyChanged("cardValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonopolyDealServiceReference.IMonopolyDeal", CallbackContract=typeof(MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDealCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMonopolyDeal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/GetData", ReplyAction="http://tempuri.org/IMonopolyDeal/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IMonopolyDeal/GetDataUsingDataContractResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.CompositeType GetDataUsingDataContract(MDWcfWFClient.MonopolyDealServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/connect")]
        void connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/startGame")]
        void startGame(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/chatToAll")]
        void chatToAll(string chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/testOperation")]
        void testOperation(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/sendMessageToService")]
        void sendMessageToService(MDWcfWFClient.MonopolyDealServiceReference.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/pollState")]
        void pollState(MDWcfWFClient.MonopolyDealServiceReference.Message message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonopolyDealCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/testOperationReturn")]
        void testOperationReturn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/testOperationReturn2")]
        void testOperationReturn2(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/recieveGuid")]
        void recieveGuid(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/addToLog")]
        void addToLog(string description);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/recieveChat")]
        void recieveChat(string description);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/recieveMessage")]
        void recieveMessage(MDWcfWFClient.MonopolyDealServiceReference.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/getName")]
        void getName();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayLookAtPlayedCardsOptions")]
        void displayLookAtPlayedCardsOptions(MDWcfWFClient.MonopolyDealServiceReference.Player currentPlayer, MDWcfWFClient.MonopolyDealServiceReference.Player[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayBankedCards")]
        void displayBankedCards(MDWcfWFClient.MonopolyDealServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayPlayedProperties")]
        void displayPlayedProperties(MDWcfWFClient.MonopolyDealServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayLast3PlayedActionCards")]
        void displayLast3PlayedActionCards();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayCardsPlayedThisTurn")]
        void displayCardsPlayedThisTurn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayNumberOfCardsInPlayersHand")]
        void displayNumberOfCardsInPlayersHand();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayPlayerHand")]
        void displayPlayerHand(MDWcfWFClient.MonopolyDealServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayCard")]
        void displayCard(MDWcfWFClient.MonopolyDealServiceReference.Card[] cards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/askIfUsingJustSayNo")]
        void askIfUsingJustSayNo(string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/displayListOfPlayersWithId")]
        void displayListOfPlayersWithId();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/askWhoToDebtCollect")]
        void askWhoToDebtCollect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/askWhoToRent")]
        void askWhoToRent();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/askWhichSetToDealBreak")]
        void askWhichSetToDealBreak();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/notifyTurnStarted")]
        void notifyTurnStarted();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/notifyOtherPlayerTurnStarted")]
        void notifyOtherPlayerTurnStarted(MDWcfWFClient.MonopolyDealServiceReference.Player p);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/playTurnAction")]
        void playTurnAction();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/askWhatSetToAddHouseTo")]
        void askWhatSetToAddHouseTo(MDWcfWFClient.MonopolyDealServiceReference.Player p, MDWcfWFClient.MonopolyDealServiceReference.Card c);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonopolyDeal/askWhatSetToAddHotelTo")]
        void askWhatSetToAddHotelTo(MDWcfWFClient.MonopolyDealServiceReference.Player p, MDWcfWFClient.MonopolyDealServiceReference.Card c);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonopolyDealChannel : MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonopolyDealClient : System.ServiceModel.DuplexClientBase<MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal>, MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal {
        
        public MonopolyDealClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MonopolyDealClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MonopolyDealClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonopolyDealClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonopolyDealClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.CompositeType GetDataUsingDataContract(MDWcfWFClient.MonopolyDealServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public void connect(string name) {
            base.Channel.connect(name);
        }
        
        public void startGame(System.Guid id) {
            base.Channel.startGame(id);
        }
        
        public void chatToAll(string chat) {
            base.Channel.chatToAll(chat);
        }
        
        public void testOperation(int id) {
            base.Channel.testOperation(id);
        }
        
        public void sendMessageToService(MDWcfWFClient.MonopolyDealServiceReference.Message message) {
            base.Channel.sendMessageToService(message);
        }
        
        public void pollState(MDWcfWFClient.MonopolyDealServiceReference.Message message) {
            base.Channel.pollState(message);
        }
    }
}
