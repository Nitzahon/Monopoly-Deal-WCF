//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDWcfWFClient.MonopolyDealServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuidBox", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class GuidBox : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool bool1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guid2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool bool1 {
            get {
                return this.bool1Field;
            }
            set {
                if ((this.bool1Field.Equals(value) != true)) {
                    this.bool1Field = value;
                    this.RaisePropertyChanged("bool1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid2 {
            get {
                return this.guid2Field;
            }
            set {
                if ((this.guid2Field.Equals(value) != true)) {
                    this.guid2Field = value;
                    this.RaisePropertyChanged("guid2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoolResponseBox", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class BoolResponseBox : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool successField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool success {
            get {
                return this.successField;
            }
            set {
                if ((this.successField.Equals(value) != true)) {
                    this.successField = value;
                    this.RaisePropertyChanged("success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameLobbyStatus", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum GameLobbyStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Not_Enough_Players_To_Start = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Enough_Players_To_Start = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Full = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        overFull = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Game_In_Progress = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Game_Ended = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameLobby", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class GameLobby : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.LobbyClient[] clientsConnectedToGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string gameLobbyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.GameLobbyStatus statusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.LobbyClient[] clientsConnectedToGame {
            get {
                return this.clientsConnectedToGameField;
            }
            set {
                if ((object.ReferenceEquals(this.clientsConnectedToGameField, value) != true)) {
                    this.clientsConnectedToGameField = value;
                    this.RaisePropertyChanged("clientsConnectedToGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gameLobbyName {
            get {
                return this.gameLobbyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.gameLobbyNameField, value) != true)) {
                    this.gameLobbyNameField = value;
                    this.RaisePropertyChanged("gameLobbyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.GameLobbyStatus status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyClient", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class LobbyClient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid gameLobbyGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool readyToStartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid gameLobbyGuid {
            get {
                return this.gameLobbyGuidField;
            }
            set {
                if ((this.gameLobbyGuidField.Equals(value) != true)) {
                    this.gameLobbyGuidField = value;
                    this.RaisePropertyChanged("gameLobbyGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool readyToStart {
            get {
                return this.readyToStartField;
            }
            set {
                if ((this.readyToStartField.Equals(value) != true)) {
                    this.readyToStartField = value;
                    this.RaisePropertyChanged("readyToStart");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayFieldModel", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayFieldModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.ActionCardEvent actionCardEventField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Statephase currentPhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel currentTurnActionModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidOfPlayerWhosTurnItIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel lastActionPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfTurnsRemainingForPlayerWhosTurnItIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerModel[] playerModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] playersAffectedByActionCardGuidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayPile playpileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid previousPlayFieldModelGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool startOfATurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid thisPlayFieldModelInstanceGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] topCardsOnPlaypileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.ActionCardEvent actionCardEvent {
            get {
                return this.actionCardEventField;
            }
            set {
                if ((object.ReferenceEquals(this.actionCardEventField, value) != true)) {
                    this.actionCardEventField = value;
                    this.RaisePropertyChanged("actionCardEvent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Statephase currentPhase {
            get {
                return this.currentPhaseField;
            }
            set {
                if ((this.currentPhaseField.Equals(value) != true)) {
                    this.currentPhaseField = value;
                    this.RaisePropertyChanged("currentPhase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel currentTurnActionModel {
            get {
                return this.currentTurnActionModelField;
            }
            set {
                if ((object.ReferenceEquals(this.currentTurnActionModelField, value) != true)) {
                    this.currentTurnActionModelField = value;
                    this.RaisePropertyChanged("currentTurnActionModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guidOfPlayerWhosTurnItIs {
            get {
                return this.guidOfPlayerWhosTurnItIsField;
            }
            set {
                if ((this.guidOfPlayerWhosTurnItIsField.Equals(value) != true)) {
                    this.guidOfPlayerWhosTurnItIsField = value;
                    this.RaisePropertyChanged("guidOfPlayerWhosTurnItIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel lastActionPlayed {
            get {
                return this.lastActionPlayedField;
            }
            set {
                if ((object.ReferenceEquals(this.lastActionPlayedField, value) != true)) {
                    this.lastActionPlayedField = value;
                    this.RaisePropertyChanged("lastActionPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfTurnsRemainingForPlayerWhosTurnItIs {
            get {
                return this.numberOfTurnsRemainingForPlayerWhosTurnItIsField;
            }
            set {
                if ((this.numberOfTurnsRemainingForPlayerWhosTurnItIsField.Equals(value) != true)) {
                    this.numberOfTurnsRemainingForPlayerWhosTurnItIsField = value;
                    this.RaisePropertyChanged("numberOfTurnsRemainingForPlayerWhosTurnItIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerModel[] playerModels {
            get {
                return this.playerModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.playerModelsField, value) != true)) {
                    this.playerModelsField = value;
                    this.RaisePropertyChanged("playerModels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] playersAffectedByActionCardGuids {
            get {
                return this.playersAffectedByActionCardGuidsField;
            }
            set {
                if ((object.ReferenceEquals(this.playersAffectedByActionCardGuidsField, value) != true)) {
                    this.playersAffectedByActionCardGuidsField = value;
                    this.RaisePropertyChanged("playersAffectedByActionCardGuids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayPile playpile {
            get {
                return this.playpileField;
            }
            set {
                if ((object.ReferenceEquals(this.playpileField, value) != true)) {
                    this.playpileField = value;
                    this.RaisePropertyChanged("playpile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid previousPlayFieldModelGuid {
            get {
                return this.previousPlayFieldModelGuidField;
            }
            set {
                if ((this.previousPlayFieldModelGuidField.Equals(value) != true)) {
                    this.previousPlayFieldModelGuidField = value;
                    this.RaisePropertyChanged("previousPlayFieldModelGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool startOfATurn {
            get {
                return this.startOfATurnField;
            }
            set {
                if ((this.startOfATurnField.Equals(value) != true)) {
                    this.startOfATurnField = value;
                    this.RaisePropertyChanged("startOfATurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid thisPlayFieldModelInstanceGuid {
            get {
                return this.thisPlayFieldModelInstanceGuidField;
            }
            set {
                if ((this.thisPlayFieldModelInstanceGuidField.Equals(value) != true)) {
                    this.thisPlayFieldModelInstanceGuidField = value;
                    this.RaisePropertyChanged("thisPlayFieldModelInstanceGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] topCardsOnPlaypile {
            get {
                return this.topCardsOnPlaypileField;
            }
            set {
                if ((object.ReferenceEquals(this.topCardsOnPlaypileField, value) != true)) {
                    this.topCardsOnPlaypileField = value;
                    this.RaisePropertyChanged("topCardsOnPlaypile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionCardEvent", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class ActionCardEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int actionCardEventIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction actionCardTypeUsedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool actionJustSayNoUsedByAffectedPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool actionJustSayNoUsedByOnTurnPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes actionTypeTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] bankedCardsTakenFromPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int debtAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool doubleTheRentCardUsedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int originalActionCardIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerAffectedByActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool playerOnTurnPerformingActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerWhoPerformedActionOffTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerWhoPerformedActionOnTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.CardIDSetGuid propertyCardGivenUpInForcedDealField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.CardIDSetGuid[] propertyCardsTakenFromPlayerAndSetTheCardWasInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid propertySetTakenFromPlayerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int actionCardEventID {
            get {
                return this.actionCardEventIDField;
            }
            set {
                if ((this.actionCardEventIDField.Equals(value) != true)) {
                    this.actionCardEventIDField = value;
                    this.RaisePropertyChanged("actionCardEventID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction actionCardTypeUsed {
            get {
                return this.actionCardTypeUsedField;
            }
            set {
                if ((this.actionCardTypeUsedField.Equals(value) != true)) {
                    this.actionCardTypeUsedField = value;
                    this.RaisePropertyChanged("actionCardTypeUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool actionJustSayNoUsedByAffectedPlayer {
            get {
                return this.actionJustSayNoUsedByAffectedPlayerField;
            }
            set {
                if ((this.actionJustSayNoUsedByAffectedPlayerField.Equals(value) != true)) {
                    this.actionJustSayNoUsedByAffectedPlayerField = value;
                    this.RaisePropertyChanged("actionJustSayNoUsedByAffectedPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool actionJustSayNoUsedByOnTurnPlayer {
            get {
                return this.actionJustSayNoUsedByOnTurnPlayerField;
            }
            set {
                if ((this.actionJustSayNoUsedByOnTurnPlayerField.Equals(value) != true)) {
                    this.actionJustSayNoUsedByOnTurnPlayerField = value;
                    this.RaisePropertyChanged("actionJustSayNoUsedByOnTurnPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes actionTypeTaken {
            get {
                return this.actionTypeTakenField;
            }
            set {
                if ((this.actionTypeTakenField.Equals(value) != true)) {
                    this.actionTypeTakenField = value;
                    this.RaisePropertyChanged("actionTypeTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] bankedCardsTakenFromPlayer {
            get {
                return this.bankedCardsTakenFromPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.bankedCardsTakenFromPlayerField, value) != true)) {
                    this.bankedCardsTakenFromPlayerField = value;
                    this.RaisePropertyChanged("bankedCardsTakenFromPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int debtAmount {
            get {
                return this.debtAmountField;
            }
            set {
                if ((this.debtAmountField.Equals(value) != true)) {
                    this.debtAmountField = value;
                    this.RaisePropertyChanged("debtAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool doubleTheRentCardUsed {
            get {
                return this.doubleTheRentCardUsedField;
            }
            set {
                if ((this.doubleTheRentCardUsedField.Equals(value) != true)) {
                    this.doubleTheRentCardUsedField = value;
                    this.RaisePropertyChanged("doubleTheRentCardUsed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int originalActionCardId {
            get {
                return this.originalActionCardIdField;
            }
            set {
                if ((this.originalActionCardIdField.Equals(value) != true)) {
                    this.originalActionCardIdField = value;
                    this.RaisePropertyChanged("originalActionCardId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerAffectedByAction {
            get {
                return this.playerAffectedByActionField;
            }
            set {
                if ((this.playerAffectedByActionField.Equals(value) != true)) {
                    this.playerAffectedByActionField = value;
                    this.RaisePropertyChanged("playerAffectedByAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool playerOnTurnPerformingAction {
            get {
                return this.playerOnTurnPerformingActionField;
            }
            set {
                if ((this.playerOnTurnPerformingActionField.Equals(value) != true)) {
                    this.playerOnTurnPerformingActionField = value;
                    this.RaisePropertyChanged("playerOnTurnPerformingAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerWhoPerformedActionOffTurn {
            get {
                return this.playerWhoPerformedActionOffTurnField;
            }
            set {
                if ((this.playerWhoPerformedActionOffTurnField.Equals(value) != true)) {
                    this.playerWhoPerformedActionOffTurnField = value;
                    this.RaisePropertyChanged("playerWhoPerformedActionOffTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerWhoPerformedActionOnTurn {
            get {
                return this.playerWhoPerformedActionOnTurnField;
            }
            set {
                if ((this.playerWhoPerformedActionOnTurnField.Equals(value) != true)) {
                    this.playerWhoPerformedActionOnTurnField = value;
                    this.RaisePropertyChanged("playerWhoPerformedActionOnTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.CardIDSetGuid propertyCardGivenUpInForcedDeal {
            get {
                return this.propertyCardGivenUpInForcedDealField;
            }
            set {
                if ((object.ReferenceEquals(this.propertyCardGivenUpInForcedDealField, value) != true)) {
                    this.propertyCardGivenUpInForcedDealField = value;
                    this.RaisePropertyChanged("propertyCardGivenUpInForcedDeal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.CardIDSetGuid[] propertyCardsTakenFromPlayerAndSetTheCardWasIn {
            get {
                return this.propertyCardsTakenFromPlayerAndSetTheCardWasInField;
            }
            set {
                if ((object.ReferenceEquals(this.propertyCardsTakenFromPlayerAndSetTheCardWasInField, value) != true)) {
                    this.propertyCardsTakenFromPlayerAndSetTheCardWasInField = value;
                    this.RaisePropertyChanged("propertyCardsTakenFromPlayerAndSetTheCardWasIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid propertySetTakenFromPlayer {
            get {
                return this.propertySetTakenFromPlayerField;
            }
            set {
                if ((this.propertySetTakenFromPlayerField.Equals(value) != true)) {
                    this.propertySetTakenFromPlayerField = value;
                    this.RaisePropertyChanged("propertySetTakenFromPlayer");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TurnActionModel", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.DrawOnTurnStart))]
    public partial class TurnActionModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool actionTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid currentPlayFieldModelGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfCardPlaysRemainingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] playerGuidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid serverGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid thisTurnactionGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes turnActionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes typeOfActionToTakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] typesOfActionListedPlayersCanTakeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool actionTaken {
            get {
                return this.actionTakenField;
            }
            set {
                if ((this.actionTakenField.Equals(value) != true)) {
                    this.actionTakenField = value;
                    this.RaisePropertyChanged("actionTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid currentPlayFieldModelGuid {
            get {
                return this.currentPlayFieldModelGuidField;
            }
            set {
                if ((this.currentPlayFieldModelGuidField.Equals(value) != true)) {
                    this.currentPlayFieldModelGuidField = value;
                    this.RaisePropertyChanged("currentPlayFieldModelGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfCardPlaysRemaining {
            get {
                return this.numberOfCardPlaysRemainingField;
            }
            set {
                if ((this.numberOfCardPlaysRemainingField.Equals(value) != true)) {
                    this.numberOfCardPlaysRemainingField = value;
                    this.RaisePropertyChanged("numberOfCardPlaysRemaining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] playerGuids {
            get {
                return this.playerGuidsField;
            }
            set {
                if ((object.ReferenceEquals(this.playerGuidsField, value) != true)) {
                    this.playerGuidsField = value;
                    this.RaisePropertyChanged("playerGuids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid serverGuid {
            get {
                return this.serverGuidField;
            }
            set {
                if ((this.serverGuidField.Equals(value) != true)) {
                    this.serverGuidField = value;
                    this.RaisePropertyChanged("serverGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid thisTurnactionGuid {
            get {
                return this.thisTurnactionGuidField;
            }
            set {
                if ((this.thisTurnactionGuidField.Equals(value) != true)) {
                    this.thisTurnactionGuidField = value;
                    this.RaisePropertyChanged("thisTurnactionGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes turnActionType {
            get {
                return this.turnActionTypeField;
            }
            set {
                if ((this.turnActionTypeField.Equals(value) != true)) {
                    this.turnActionTypeField = value;
                    this.RaisePropertyChanged("turnActionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes typeOfActionToTake {
            get {
                return this.typeOfActionToTakeField;
            }
            set {
                if ((this.typeOfActionToTakeField.Equals(value) != true)) {
                    this.typeOfActionToTakeField = value;
                    this.RaisePropertyChanged("typeOfActionToTake");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] typesOfActionListedPlayersCanTake {
            get {
                return this.typesOfActionListedPlayersCanTakeField;
            }
            set {
                if ((object.ReferenceEquals(this.typesOfActionListedPlayersCanTakeField, value) != true)) {
                    this.typesOfActionListedPlayersCanTakeField = value;
                    this.RaisePropertyChanged("typesOfActionListedPlayersCanTake");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayPile", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayPile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] playPileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] playPile {
            get {
                return this.playPileField;
            }
            set {
                if ((object.ReferenceEquals(this.playPileField, value) != true)) {
                    this.playPileField = value;
                    this.RaisePropertyChanged("playPile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Statephase", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum Statephase : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Game_Started = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Draw_2_Cards = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Draw_5_Cards = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_0_Cards_Played = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_0_Cards_Played_Ask_Just_Say_No = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_0_Cards_Played_Just_Say_No_Used_By_Oppostion_Ask_Player_On_Turn_Just_Say_No = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_1_Cards_Played = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_1_Cards_Played_Ask_Just_Say_No = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_1_Cards_Played_Just_Say_No_Used_By_Oppostion_Ask_Player_On_Turn_Just_Say_No = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_2_Cards_Played = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_2_Cards_Played_Ask_Just_Say_No = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_2_Cards_Played_Just_Say_No_Used_By_Oppostion_Ask_Player_On_Turn_Just_Say_No = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_3_Cards_Played_Swap_Properties_Or_End_Turn_Only = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_7_Or_Less_Cards_In_Hand_Setup_NextPlayer = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_8_Or_More_Cards_In_Hand_Discard_Cards = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_8_Cards_In_Hand_Discard_1_Card = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_9_Cards_In_Hand_Discard_2_Cards = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_10_Cards_In_Hand_Discard_3_Cards = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_11_Cards_In_Hand_Discard_4_Cards = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_12_Cards_In_Hand_Discard_5_Cards = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Invalid_Action_For_Turn = 20,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerModel", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] actionsCurrentlyAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int amountOwedToAnotherPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerBank bankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerHand handField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool hasHadCardsTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isReadyToStartGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isThisPlayersTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool owesAnotherPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets propertySetsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] actionsCurrentlyAllowed {
            get {
                return this.actionsCurrentlyAllowedField;
            }
            set {
                if ((object.ReferenceEquals(this.actionsCurrentlyAllowedField, value) != true)) {
                    this.actionsCurrentlyAllowedField = value;
                    this.RaisePropertyChanged("actionsCurrentlyAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int amountOwedToAnotherPlayer {
            get {
                return this.amountOwedToAnotherPlayerField;
            }
            set {
                if ((this.amountOwedToAnotherPlayerField.Equals(value) != true)) {
                    this.amountOwedToAnotherPlayerField = value;
                    this.RaisePropertyChanged("amountOwedToAnotherPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerBank bank {
            get {
                return this.bankField;
            }
            set {
                if ((object.ReferenceEquals(this.bankField, value) != true)) {
                    this.bankField = value;
                    this.RaisePropertyChanged("bank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerHand hand {
            get {
                return this.handField;
            }
            set {
                if ((object.ReferenceEquals(this.handField, value) != true)) {
                    this.handField = value;
                    this.RaisePropertyChanged("hand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool hasHadCardsTaken {
            get {
                return this.hasHadCardsTakenField;
            }
            set {
                if ((this.hasHadCardsTakenField.Equals(value) != true)) {
                    this.hasHadCardsTakenField = value;
                    this.RaisePropertyChanged("hasHadCardsTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isReadyToStartGame {
            get {
                return this.isReadyToStartGameField;
            }
            set {
                if ((this.isReadyToStartGameField.Equals(value) != true)) {
                    this.isReadyToStartGameField = value;
                    this.RaisePropertyChanged("isReadyToStartGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isThisPlayersTurn {
            get {
                return this.isThisPlayersTurnField;
            }
            set {
                if ((this.isThisPlayersTurnField.Equals(value) != true)) {
                    this.isThisPlayersTurnField = value;
                    this.RaisePropertyChanged("isThisPlayersTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool owesAnotherPlayer {
            get {
                return this.owesAnotherPlayerField;
            }
            set {
                if ((this.owesAnotherPlayerField.Equals(value) != true)) {
                    this.owesAnotherPlayerField = value;
                    this.RaisePropertyChanged("owesAnotherPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets propertySets {
            get {
                return this.propertySetsField;
            }
            set {
                if ((object.ReferenceEquals(this.propertySetsField, value) != true)) {
                    this.propertySetsField = value;
                    this.RaisePropertyChanged("propertySets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.ActionCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.RentStandard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.MoneyCard))]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid cardGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.CardType cardTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid cardGuid {
            get {
                return this.cardGuidField;
            }
            set {
                if ((this.cardGuidField.Equals(value) != true)) {
                    this.cardGuidField = value;
                    this.RaisePropertyChanged("cardGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardID {
            get {
                return this.cardIDField;
            }
            set {
                if ((this.cardIDField.Equals(value) != true)) {
                    this.cardIDField = value;
                    this.RaisePropertyChanged("cardID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardName {
            get {
                return this.cardNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cardNameField, value) != true)) {
                    this.cardNameField = value;
                    this.RaisePropertyChanged("cardName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardText {
            get {
                return this.cardTextField;
            }
            set {
                if ((object.ReferenceEquals(this.cardTextField, value) != true)) {
                    this.cardTextField = value;
                    this.RaisePropertyChanged("cardText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.CardType cardType {
            get {
                return this.cardTypeField;
            }
            set {
                if ((this.cardTypeField.Equals(value) != true)) {
                    this.cardTypeField = value;
                    this.RaisePropertyChanged("cardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardValue {
            get {
                return this.cardValueField;
            }
            set {
                if ((this.cardValueField.Equals(value) != true)) {
                    this.cardValueField = value;
                    this.RaisePropertyChanged("cardValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardIDSetGuid", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class CardIDSetGuid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid setGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardID {
            get {
                return this.cardIDField;
            }
            set {
                if ((this.cardIDField.Equals(value) != true)) {
                    this.cardIDField = value;
                    this.RaisePropertyChanged("cardID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid setGuid {
            get {
                return this.setGuidField;
            }
            set {
                if ((this.setGuidField.Equals(value) != true)) {
                    this.setGuidField = value;
                    this.RaisePropertyChanged("setGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionCardAction", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum ActionCardAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotAnActionCard = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SlyDeal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForcedDeal = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DealBreaker = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JustSayNo = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DebtCollector = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItsMyBirthday = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RentMultiColor = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RentStandard = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoubleTheRent = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        House = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hotel = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PassGo = 12,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TurnActionTypes", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum TurnActionTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        gameStarted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        turnStarted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        drawTwoCardsAtStartOfTurn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        drawFiveCardsAtStartOfTurn = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndTurn = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchAroundPlayedProperties = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayCard = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayPropertyCard_New_Set = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayPropertyCardFromHand = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MovePropertyCard = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BankMoneyCard = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayActionCard = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BankActionCard = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayJustSayNo = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AdknowlegeRecievedCurrentState = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_1_Card = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_2_Cards = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_3_Cards = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_4_Cards = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_5_Cards = 19,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PayDebt = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dont_Play_Just_Say_No = 21,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DrawOnTurnStart", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class DrawOnTurnStart : MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool bField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool b {
            get {
                return this.bField;
            }
            set {
                if ((this.bField.Equals(value) != true)) {
                    this.bField = value;
                    this.RaisePropertyChanged("b");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerBank", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerBank : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInBankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInBank {
            get {
                return this.cardsInBankField;
            }
            set {
                if ((object.ReferenceEquals(this.cardsInBankField, value) != true)) {
                    this.cardsInBankField = value;
                    this.RaisePropertyChanged("cardsInBank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerGuid {
            get {
                return this.playerGuidField;
            }
            set {
                if ((this.playerGuidField.Equals(value) != true)) {
                    this.playerGuidField = value;
                    this.RaisePropertyChanged("playerGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerHand", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerHand : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInHand {
            get {
                return this.cardsInHandField;
            }
            set {
                if ((object.ReferenceEquals(this.cardsInHandField, value) != true)) {
                    this.cardsInHandField = value;
                    this.RaisePropertyChanged("cardsInHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerGuid {
            get {
                return this.playerGuidField;
            }
            set {
                if ((this.playerGuidField.Equals(value) != true)) {
                    this.playerGuidField = value;
                    this.RaisePropertyChanged("playerGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerPropertySets", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerPropertySets : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet[] playersPropertySetsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerGuid {
            get {
                return this.playerGuidField;
            }
            set {
                if ((this.playerGuidField.Equals(value) != true)) {
                    this.playerGuidField = value;
                    this.RaisePropertyChanged("playerGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet[] playersPropertySets {
            get {
                return this.playersPropertySetsField;
            }
            set {
                if ((object.ReferenceEquals(this.playersPropertySetsField, value) != true)) {
                    this.playersPropertySetsField = value;
                    this.RaisePropertyChanged("playersPropertySets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyCard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PropertyCard : MDWcfWFClient.MonopolyDealServiceReference.Card {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int currentColorSetCompleteSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor currentPropertyColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int downSetSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fiveCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fiveCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fiveCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isCardUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isMultiWildField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isWildField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int oneCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int oneCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int oneCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor[] propertyColorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threeCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threeCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threeCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int upSetSizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int currentColorSetCompleteSize {
            get {
                return this.currentColorSetCompleteSizeField;
            }
            set {
                if ((this.currentColorSetCompleteSizeField.Equals(value) != true)) {
                    this.currentColorSetCompleteSizeField = value;
                    this.RaisePropertyChanged("currentColorSetCompleteSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor currentPropertyColor {
            get {
                return this.currentPropertyColorField;
            }
            set {
                if ((this.currentPropertyColorField.Equals(value) != true)) {
                    this.currentPropertyColorField = value;
                    this.RaisePropertyChanged("currentPropertyColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int downSetSize {
            get {
                return this.downSetSizeField;
            }
            set {
                if ((this.downSetSizeField.Equals(value) != true)) {
                    this.downSetSizeField = value;
                    this.RaisePropertyChanged("downSetSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fiveCardInSetRentValue {
            get {
                return this.fiveCardInSetRentValueField;
            }
            set {
                if ((this.fiveCardInSetRentValueField.Equals(value) != true)) {
                    this.fiveCardInSetRentValueField = value;
                    this.RaisePropertyChanged("fiveCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fiveCardInSetRentValueDown {
            get {
                return this.fiveCardInSetRentValueDownField;
            }
            set {
                if ((this.fiveCardInSetRentValueDownField.Equals(value) != true)) {
                    this.fiveCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("fiveCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fiveCardInSetRentValueUp {
            get {
                return this.fiveCardInSetRentValueUpField;
            }
            set {
                if ((this.fiveCardInSetRentValueUpField.Equals(value) != true)) {
                    this.fiveCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("fiveCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourCardInSetRentValue {
            get {
                return this.fourCardInSetRentValueField;
            }
            set {
                if ((this.fourCardInSetRentValueField.Equals(value) != true)) {
                    this.fourCardInSetRentValueField = value;
                    this.RaisePropertyChanged("fourCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourCardInSetRentValueDown {
            get {
                return this.fourCardInSetRentValueDownField;
            }
            set {
                if ((this.fourCardInSetRentValueDownField.Equals(value) != true)) {
                    this.fourCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("fourCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourCardInSetRentValueUp {
            get {
                return this.fourCardInSetRentValueUpField;
            }
            set {
                if ((this.fourCardInSetRentValueUpField.Equals(value) != true)) {
                    this.fourCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("fourCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isCardUp {
            get {
                return this.isCardUpField;
            }
            set {
                if ((this.isCardUpField.Equals(value) != true)) {
                    this.isCardUpField = value;
                    this.RaisePropertyChanged("isCardUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isMultiWild {
            get {
                return this.isMultiWildField;
            }
            set {
                if ((this.isMultiWildField.Equals(value) != true)) {
                    this.isMultiWildField = value;
                    this.RaisePropertyChanged("isMultiWild");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isWild {
            get {
                return this.isWildField;
            }
            set {
                if ((this.isWildField.Equals(value) != true)) {
                    this.isWildField = value;
                    this.RaisePropertyChanged("isWild");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int oneCardInSetRentValue {
            get {
                return this.oneCardInSetRentValueField;
            }
            set {
                if ((this.oneCardInSetRentValueField.Equals(value) != true)) {
                    this.oneCardInSetRentValueField = value;
                    this.RaisePropertyChanged("oneCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int oneCardInSetRentValueDown {
            get {
                return this.oneCardInSetRentValueDownField;
            }
            set {
                if ((this.oneCardInSetRentValueDownField.Equals(value) != true)) {
                    this.oneCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("oneCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int oneCardInSetRentValueUp {
            get {
                return this.oneCardInSetRentValueUpField;
            }
            set {
                if ((this.oneCardInSetRentValueUpField.Equals(value) != true)) {
                    this.oneCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("oneCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor[] propertyColors {
            get {
                return this.propertyColorsField;
            }
            set {
                if ((object.ReferenceEquals(this.propertyColorsField, value) != true)) {
                    this.propertyColorsField = value;
                    this.RaisePropertyChanged("propertyColors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threeCardInSetRentValue {
            get {
                return this.threeCardInSetRentValueField;
            }
            set {
                if ((this.threeCardInSetRentValueField.Equals(value) != true)) {
                    this.threeCardInSetRentValueField = value;
                    this.RaisePropertyChanged("threeCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threeCardInSetRentValueDown {
            get {
                return this.threeCardInSetRentValueDownField;
            }
            set {
                if ((this.threeCardInSetRentValueDownField.Equals(value) != true)) {
                    this.threeCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("threeCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threeCardInSetRentValueUp {
            get {
                return this.threeCardInSetRentValueUpField;
            }
            set {
                if ((this.threeCardInSetRentValueUpField.Equals(value) != true)) {
                    this.threeCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("threeCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoCardInSetRentValue {
            get {
                return this.twoCardInSetRentValueField;
            }
            set {
                if ((this.twoCardInSetRentValueField.Equals(value) != true)) {
                    this.twoCardInSetRentValueField = value;
                    this.RaisePropertyChanged("twoCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoCardInSetRentValueDown {
            get {
                return this.twoCardInSetRentValueDownField;
            }
            set {
                if ((this.twoCardInSetRentValueDownField.Equals(value) != true)) {
                    this.twoCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("twoCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoCardInSetRentValueUp {
            get {
                return this.twoCardInSetRentValueUpField;
            }
            set {
                if ((this.twoCardInSetRentValueUpField.Equals(value) != true)) {
                    this.twoCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("twoCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int upSetSize {
            get {
                return this.upSetSizeField;
            }
            set {
                if ((this.upSetSizeField.Equals(value) != true)) {
                    this.upSetSizeField = value;
                    this.RaisePropertyChanged("upSetSize");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionCard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.RentStandard))]
    public partial class ActionCard : MDWcfWFClient.MonopolyDealServiceReference.Card {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MonetaryValueOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction actionTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MonetaryValueOnly {
            get {
                return this.MonetaryValueOnlyField;
            }
            set {
                if ((this.MonetaryValueOnlyField.Equals(value) != true)) {
                    this.MonetaryValueOnlyField = value;
                    this.RaisePropertyChanged("MonetaryValueOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction actionType {
            get {
                return this.actionTypeField;
            }
            set {
                if ((this.actionTypeField.Equals(value) != true)) {
                    this.actionTypeField = value;
                    this.RaisePropertyChanged("actionType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RentStandard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class RentStandard : MDWcfWFClient.MonopolyDealServiceReference.ActionCard {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorUpField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorDown {
            get {
                return this.colorDownField;
            }
            set {
                if ((this.colorDownField.Equals(value) != true)) {
                    this.colorDownField = value;
                    this.RaisePropertyChanged("colorDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorUp {
            get {
                return this.colorUpField;
            }
            set {
                if ((this.colorUpField.Equals(value) != true)) {
                    this.colorUpField = value;
                    this.RaisePropertyChanged("colorUp");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoneyCard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class MoneyCard : MDWcfWFClient.MonopolyDealServiceReference.Card {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardType", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum CardType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Action = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Property = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WildProperty = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Money = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyColor", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum PropertyColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Brown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LightBlue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pink = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Orange = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Station = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Utilities = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_LightBlue_Brown = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_LightBlue_Station = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Pink_Orange = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Red_Yellow = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Blue_Green = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Green_Station = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Station_Utility = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_MultiColored = 17,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyCardSet", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PropertyCardSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool hasHotelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool hasHouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card hotelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card houseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyCard[] propertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor propertySetColorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool hasHotel {
            get {
                return this.hasHotelField;
            }
            set {
                if ((this.hasHotelField.Equals(value) != true)) {
                    this.hasHotelField = value;
                    this.RaisePropertyChanged("hasHotel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool hasHouse {
            get {
                return this.hasHouseField;
            }
            set {
                if ((this.hasHouseField.Equals(value) != true)) {
                    this.hasHouseField = value;
                    this.RaisePropertyChanged("hasHouse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card hotel {
            get {
                return this.hotelField;
            }
            set {
                if ((object.ReferenceEquals(this.hotelField, value) != true)) {
                    this.hotelField = value;
                    this.RaisePropertyChanged("hotel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card house {
            get {
                return this.houseField;
            }
            set {
                if ((object.ReferenceEquals(this.houseField, value) != true)) {
                    this.houseField = value;
                    this.RaisePropertyChanged("house");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyCard[] properties {
            get {
                return this.propertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.propertiesField, value) != true)) {
                    this.propertiesField = value;
                    this.RaisePropertyChanged("properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor propertySetColor {
            get {
                return this.propertySetColorField;
            }
            set {
                if ((this.propertySetColorField.Equals(value) != true)) {
                    this.propertySetColorField = value;
                    this.RaisePropertyChanged("propertySetColor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonopolyDealServiceReference.IMonopolyDeal")]
    public interface IMonopolyDeal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playHouseMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playHouseMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playHouseMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToAddHouseTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playHotelMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playHotelMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playHotelMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToAddHotelTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/connectToLobby", ReplyAction="http://tempuri.org/IMonopolyDeal/connectToLobbyResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.GuidBox connectToLobby(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/getGameLobbyStatus", ReplyAction="http://tempuri.org/IMonopolyDeal/getGameLobbyStatusResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.GameLobbyStatus getGameLobbyStatus(MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuidP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/getListOfAllGameLobbys", ReplyAction="http://tempuri.org/IMonopolyDeal/getListOfAllGameLobbysResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.GameLobby[] getListOfAllGameLobbys();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/joinExistingGameLobby", ReplyAction="http://tempuri.org/IMonopolyDeal/joinExistingGameLobbyResponse")]
        bool joinExistingGameLobby(MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuidP, MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/joinNewGameLobby", ReplyAction="http://tempuri.org/IMonopolyDeal/joinNewGameLobbyResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.GuidBox joinNewGameLobby(MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/exitGameLobby", ReplyAction="http://tempuri.org/IMonopolyDeal/exitGameLobbyResponse")]
        bool exitGameLobby(MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/setLobbyClientReady", ReplyAction="http://tempuri.org/IMonopolyDeal/setLobbyClientReadyResponse")]
        bool setLobbyClientReady(MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuidP, MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP, bool readyP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/pollStateMonopolyDeal", ReplyAction="http://tempuri.org/IMonopolyDeal/pollStateMonopolyDealResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel pollStateMonopolyDeal(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/draw2AtStartOfTurnMD", ReplyAction="http://tempuri.org/IMonopolyDeal/draw2AtStartOfTurnMDResponse")]
        bool draw2AtStartOfTurnMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playCardFromHandToBankMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playCardFromHandToBankMDResponse")]
        bool playCardFromHandToBankMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playWildRentActionCardOnTurnMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playWildRentActionCardOnTurnMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playWildRentActionCardOnTurnMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerTargetedGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToRentOnGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playStandardRentActionCardOnTurnMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playStandardRentActionCardOnTurnMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playStandardRentActionCardOnTurnMD(int playedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToRentOn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playJustSayNoMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playJustSayNoMDResponse")]
        bool playJustSayNoMD(int playedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/doNotPlayJustSayNoMD", ReplyAction="http://tempuri.org/IMonopolyDeal/doNotPlayJustSayNoMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox doNotPlayJustSayNoMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playPropertyCardMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playPropertyCardMDResponse")]
        bool playPropertyCardMD(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setToPlayPropertyTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playPropertyCardNewSetMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playPropertyCardNewSetMDResponse")]
        bool playPropertyCardNewSetMD(int playedCardID, bool isOrientedUp, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/movePropertyCardMD", ReplyAction="http://tempuri.org/IMonopolyDeal/movePropertyCardMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox movePropertyCardMD(int propertyCardToMoveID, bool isCardUp, bool moveToExistingSet, MDWcfWFClient.MonopolyDealServiceReference.GuidBox oldSetGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setToPlayPropertyToGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/payCardsMD", ReplyAction="http://tempuri.org/IMonopolyDeal/payCardsMDResponse")]
        bool payCardsMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerPaying, int[] cardsToPayWith, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/endTurnMD", ReplyAction="http://tempuri.org/IMonopolyDeal/endTurnMDResponse")]
        bool endTurnMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/discardMD", ReplyAction="http://tempuri.org/IMonopolyDeal/discardMDResponse")]
        bool discardMD(int cardsToDiscardIDs, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardPassGoMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardPassGoMDResponse")]
        bool playActionCardPassGoMD(int passGoCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardItsMyBirthdayMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardItsMyBirthdayMDResponse")]
        bool playActionCardItsMyBirthdayMD(int myBirthdayCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardDebtCollectorMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardDebtCollectorMDResponse")]
        bool playActionCardDebtCollectorMD(int debtCollectorCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/draw5AtStartOfTurnMD", ReplyAction="http://tempuri.org/IMonopolyDeal/draw5AtStartOfTurnMDResponse")]
        bool draw5AtStartOfTurnMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/hasGameStartedMD", ReplyAction="http://tempuri.org/IMonopolyDeal/hasGameStartedMDResponse")]
        bool hasGameStartedMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardSlyDealMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardSlyDealMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playActionCardSlyDealMD(int slyDealCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, int targetedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setTargetCardIn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardForcedDealMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardForcedDealMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playActionCardForcedDealMD(int forcedDealCardID, int playersCardToSwapWith, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setPlayersCardIsIn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, int targetedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setTargetCardIn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardDealBreakerMD", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardDealBreakerMDResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playActionCardDealBreakerMD(int dealBreakerCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setTargeted, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonopolyDealChannel : MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonopolyDealClient : System.ServiceModel.ClientBase<MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal>, MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal {
        
        public MonopolyDealClient() {
        }
        
        public MonopolyDealClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonopolyDealClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonopolyDealClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonopolyDealClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playHouseMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToAddHouseTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playHouseMD(playedCardID, setOfPropertiesToAddHouseTo, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playHotelMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToAddHotelTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playHotelMD(playedCardID, setOfPropertiesToAddHotelTo, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.GuidBox connectToLobby(string name) {
            return base.Channel.connectToLobby(name);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.GameLobbyStatus getGameLobbyStatus(MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuidP) {
            return base.Channel.getGameLobbyStatus(gameLobbyGuidP);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.GameLobby[] getListOfAllGameLobbys() {
            return base.Channel.getListOfAllGameLobbys();
        }
        
        public bool joinExistingGameLobby(MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuidP, MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP) {
            return base.Channel.joinExistingGameLobby(gameLobbyGuidP, clientGuidP);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.GuidBox joinNewGameLobby(MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP) {
            return base.Channel.joinNewGameLobby(clientGuidP);
        }
        
        public bool exitGameLobby(MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP) {
            return base.Channel.exitGameLobby(clientGuidP);
        }
        
        public bool setLobbyClientReady(MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuidP, MDWcfWFClient.MonopolyDealServiceReference.GuidBox clientGuidP, bool readyP) {
            return base.Channel.setLobbyClientReady(gameLobbyGuidP, clientGuidP, readyP);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel pollStateMonopolyDeal(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameGuid) {
            return base.Channel.pollStateMonopolyDeal(playerGuid, gameGuid);
        }
        
        public bool draw2AtStartOfTurnMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.draw2AtStartOfTurnMD(playerGuid, gameLobbyGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playCardFromHandToBankMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playCardFromHandToBankMD(playedCardID, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playWildRentActionCardOnTurnMD(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerTargetedGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToRentOnGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playWildRentActionCardOnTurnMD(playedCardID, playerTargetedGuid, setOfPropertiesToRentOnGuid, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playStandardRentActionCardOnTurnMD(int playedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setOfPropertiesToRentOn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playStandardRentActionCardOnTurnMD(playedCard, setOfPropertiesToRentOn, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool playJustSayNoMD(int playedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playJustSayNoMD(playedCard, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox doNotPlayJustSayNoMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.doNotPlayJustSayNoMD(playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool playPropertyCardMD(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setToPlayPropertyTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playPropertyCardMD(player, playedCard, setToPlayPropertyTo, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playPropertyCardNewSetMD(int playedCardID, bool isOrientedUp, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playPropertyCardNewSetMD(playedCardID, isOrientedUp, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox movePropertyCardMD(int propertyCardToMoveID, bool isCardUp, bool moveToExistingSet, MDWcfWFClient.MonopolyDealServiceReference.GuidBox oldSetGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setToPlayPropertyToGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.movePropertyCardMD(propertyCardToMoveID, isCardUp, moveToExistingSet, oldSetGuid, setToPlayPropertyToGuid, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool payCardsMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerPaying, int[] cardsToPayWith, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.payCardsMD(playerPaying, cardsToPayWith, gameLobbyGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool endTurnMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.endTurnMD(playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool discardMD(int cardsToDiscardIDs, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.discardMD(cardsToDiscardIDs, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool playActionCardPassGoMD(int passGoCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playActionCardPassGoMD(passGoCardID, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool playActionCardItsMyBirthdayMD(int myBirthdayCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playActionCardItsMyBirthdayMD(myBirthdayCardID, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool playActionCardDebtCollectorMD(int debtCollectorCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playActionCardDebtCollectorMD(debtCollectorCardID, targetedPlayerGuid, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool draw5AtStartOfTurnMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.draw5AtStartOfTurnMD(playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public bool hasGameStartedMD(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid) {
            return base.Channel.hasGameStartedMD(playerGuid, gameLobbyGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playActionCardSlyDealMD(int slyDealCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, int targetedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setTargetCardIn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playActionCardSlyDealMD(slyDealCardID, targetedPlayerGuid, targetedCard, setTargetCardIn, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playActionCardForcedDealMD(int forcedDealCardID, int playersCardToSwapWith, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setPlayersCardIsIn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, int targetedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setTargetCardIn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playActionCardForcedDealMD(forcedDealCardID, playersCardToSwapWith, setPlayersCardIsIn, targetedPlayerGuid, targetedCard, setTargetCardIn, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.BoolResponseBox playActionCardDealBreakerMD(int dealBreakerCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox targetedPlayerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox setTargeted, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameLobbyGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playActionCardDealBreakerMD(dealBreakerCardID, targetedPlayerGuid, setTargeted, playerGuid, gameLobbyGuid, playfieldModelInstanceGuid);
        }
    }
}
