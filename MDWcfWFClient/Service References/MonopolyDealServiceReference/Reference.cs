//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDWcfWFClient.MonopolyDealServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuidBox", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class GuidBox : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool bool1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guid2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool bool1 {
            get {
                return this.bool1Field;
            }
            set {
                if ((this.bool1Field.Equals(value) != true)) {
                    this.bool1Field = value;
                    this.RaisePropertyChanged("bool1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid2 {
            get {
                return this.guid2Field;
            }
            set {
                if ((this.guid2Field.Equals(value) != true)) {
                    this.guid2Field = value;
                    this.RaisePropertyChanged("guid2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayFieldModel", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayFieldModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Statephase currentPhaseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel currentTurnActionModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidOfPlayerWhosTurnItIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel lastActionPlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfTurnsRemainingForPlayerWhosTurnItIsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerModel[] playerModelsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] playersAffectedByActionCardGuidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool startOfATurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid thisPlayFieldModelInstanceGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] topCardsOnPlaypileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Statephase currentPhase {
            get {
                return this.currentPhaseField;
            }
            set {
                if ((this.currentPhaseField.Equals(value) != true)) {
                    this.currentPhaseField = value;
                    this.RaisePropertyChanged("currentPhase");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel currentTurnActionModel {
            get {
                return this.currentTurnActionModelField;
            }
            set {
                if ((object.ReferenceEquals(this.currentTurnActionModelField, value) != true)) {
                    this.currentTurnActionModelField = value;
                    this.RaisePropertyChanged("currentTurnActionModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guidOfPlayerWhosTurnItIs {
            get {
                return this.guidOfPlayerWhosTurnItIsField;
            }
            set {
                if ((this.guidOfPlayerWhosTurnItIsField.Equals(value) != true)) {
                    this.guidOfPlayerWhosTurnItIsField = value;
                    this.RaisePropertyChanged("guidOfPlayerWhosTurnItIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel lastActionPlayed {
            get {
                return this.lastActionPlayedField;
            }
            set {
                if ((object.ReferenceEquals(this.lastActionPlayedField, value) != true)) {
                    this.lastActionPlayedField = value;
                    this.RaisePropertyChanged("lastActionPlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfTurnsRemainingForPlayerWhosTurnItIs {
            get {
                return this.numberOfTurnsRemainingForPlayerWhosTurnItIsField;
            }
            set {
                if ((this.numberOfTurnsRemainingForPlayerWhosTurnItIsField.Equals(value) != true)) {
                    this.numberOfTurnsRemainingForPlayerWhosTurnItIsField = value;
                    this.RaisePropertyChanged("numberOfTurnsRemainingForPlayerWhosTurnItIs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerModel[] playerModels {
            get {
                return this.playerModelsField;
            }
            set {
                if ((object.ReferenceEquals(this.playerModelsField, value) != true)) {
                    this.playerModelsField = value;
                    this.RaisePropertyChanged("playerModels");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] playersAffectedByActionCardGuids {
            get {
                return this.playersAffectedByActionCardGuidsField;
            }
            set {
                if ((object.ReferenceEquals(this.playersAffectedByActionCardGuidsField, value) != true)) {
                    this.playersAffectedByActionCardGuidsField = value;
                    this.RaisePropertyChanged("playersAffectedByActionCardGuids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool startOfATurn {
            get {
                return this.startOfATurnField;
            }
            set {
                if ((this.startOfATurnField.Equals(value) != true)) {
                    this.startOfATurnField = value;
                    this.RaisePropertyChanged("startOfATurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid thisPlayFieldModelInstanceGuid {
            get {
                return this.thisPlayFieldModelInstanceGuidField;
            }
            set {
                if ((this.thisPlayFieldModelInstanceGuidField.Equals(value) != true)) {
                    this.thisPlayFieldModelInstanceGuidField = value;
                    this.RaisePropertyChanged("thisPlayFieldModelInstanceGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] topCardsOnPlaypile {
            get {
                return this.topCardsOnPlaypileField;
            }
            set {
                if ((object.ReferenceEquals(this.topCardsOnPlaypileField, value) != true)) {
                    this.topCardsOnPlaypileField = value;
                    this.RaisePropertyChanged("topCardsOnPlaypile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TurnActionModel", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.DrawOnTurnStart))]
    public partial class TurnActionModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool actionTakenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid currentPlayFieldModelGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfCardPlaysRemainingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] playerGuidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid serverGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid thisTurnactionGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes turnActionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes typeOfActionToTakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] typesOfActionListedPlayersCanTakeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool actionTaken {
            get {
                return this.actionTakenField;
            }
            set {
                if ((this.actionTakenField.Equals(value) != true)) {
                    this.actionTakenField = value;
                    this.RaisePropertyChanged("actionTaken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid currentPlayFieldModelGuid {
            get {
                return this.currentPlayFieldModelGuidField;
            }
            set {
                if ((this.currentPlayFieldModelGuidField.Equals(value) != true)) {
                    this.currentPlayFieldModelGuidField = value;
                    this.RaisePropertyChanged("currentPlayFieldModelGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfCardPlaysRemaining {
            get {
                return this.numberOfCardPlaysRemainingField;
            }
            set {
                if ((this.numberOfCardPlaysRemainingField.Equals(value) != true)) {
                    this.numberOfCardPlaysRemainingField = value;
                    this.RaisePropertyChanged("numberOfCardPlaysRemaining");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] playerGuids {
            get {
                return this.playerGuidsField;
            }
            set {
                if ((object.ReferenceEquals(this.playerGuidsField, value) != true)) {
                    this.playerGuidsField = value;
                    this.RaisePropertyChanged("playerGuids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid serverGuid {
            get {
                return this.serverGuidField;
            }
            set {
                if ((this.serverGuidField.Equals(value) != true)) {
                    this.serverGuidField = value;
                    this.RaisePropertyChanged("serverGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid thisTurnactionGuid {
            get {
                return this.thisTurnactionGuidField;
            }
            set {
                if ((this.thisTurnactionGuidField.Equals(value) != true)) {
                    this.thisTurnactionGuidField = value;
                    this.RaisePropertyChanged("thisTurnactionGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes turnActionType {
            get {
                return this.turnActionTypeField;
            }
            set {
                if ((this.turnActionTypeField.Equals(value) != true)) {
                    this.turnActionTypeField = value;
                    this.RaisePropertyChanged("turnActionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes typeOfActionToTake {
            get {
                return this.typeOfActionToTakeField;
            }
            set {
                if ((this.typeOfActionToTakeField.Equals(value) != true)) {
                    this.typeOfActionToTakeField = value;
                    this.RaisePropertyChanged("typeOfActionToTake");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] typesOfActionListedPlayersCanTake {
            get {
                return this.typesOfActionListedPlayersCanTakeField;
            }
            set {
                if ((object.ReferenceEquals(this.typesOfActionListedPlayersCanTakeField, value) != true)) {
                    this.typesOfActionListedPlayersCanTakeField = value;
                    this.RaisePropertyChanged("typesOfActionListedPlayersCanTake");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Statephase", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum Statephase : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Game_Started = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Draw_2_Cards = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Draw_5_Cards = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_0_Cards_Played = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_0_Cards_Played_Ask_Just_Say_No = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_0_Cards_Played_Just_Say_No_Used_By_Oppostion_Ask_Player_On_Turn_Just_Say_No = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_1_Cards_Played = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_1_Cards_Played_Ask_Just_Say_No = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_1_Cards_Played_Just_Say_No_Used_By_Oppostion_Ask_Player_On_Turn_Just_Say_No = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_2_Cards_Played = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_2_Cards_Played_Ask_Just_Say_No = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_2_Cards_Played_Just_Say_No_Used_By_Oppostion_Ask_Player_On_Turn_Just_Say_No = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Started_Cards_Drawn_3_Cards_Played_Swap_Properties_Or_End_Turn_Only = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_7_Or_Less_Cards_In_Hand_Setup_NextPlayer = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_8_Or_More_Cards_In_Hand_Discard_Cards = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_8_Cards_In_Hand_Discard_1_Card = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_9_Cards_In_Hand_Discard_2_Cards = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_10_Cards_In_Hand_Discard_3_Cards = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_11_Cards_In_Hand_Discard_4_Cards = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Turn_Ended_12_Cards_In_Hand_Discard_5_Cards = 19,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerModel", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] actionsCurrentlyAllowedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerBank bankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid guidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerHand handField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isReadyToStartGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isThisPlayersTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets propertySetsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[] actionsCurrentlyAllowed {
            get {
                return this.actionsCurrentlyAllowedField;
            }
            set {
                if ((object.ReferenceEquals(this.actionsCurrentlyAllowedField, value) != true)) {
                    this.actionsCurrentlyAllowedField = value;
                    this.RaisePropertyChanged("actionsCurrentlyAllowed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerBank bank {
            get {
                return this.bankField;
            }
            set {
                if ((object.ReferenceEquals(this.bankField, value) != true)) {
                    this.bankField = value;
                    this.RaisePropertyChanged("bank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid guid {
            get {
                return this.guidField;
            }
            set {
                if ((this.guidField.Equals(value) != true)) {
                    this.guidField = value;
                    this.RaisePropertyChanged("guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerHand hand {
            get {
                return this.handField;
            }
            set {
                if ((object.ReferenceEquals(this.handField, value) != true)) {
                    this.handField = value;
                    this.RaisePropertyChanged("hand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isReadyToStartGame {
            get {
                return this.isReadyToStartGameField;
            }
            set {
                if ((this.isReadyToStartGameField.Equals(value) != true)) {
                    this.isReadyToStartGameField = value;
                    this.RaisePropertyChanged("isReadyToStartGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isThisPlayersTurn {
            get {
                return this.isThisPlayersTurnField;
            }
            set {
                if ((this.isThisPlayersTurnField.Equals(value) != true)) {
                    this.isThisPlayersTurnField = value;
                    this.RaisePropertyChanged("isThisPlayersTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets propertySets {
            get {
                return this.propertySetsField;
            }
            set {
                if ((object.ReferenceEquals(this.propertySetsField, value) != true)) {
                    this.propertySetsField = value;
                    this.RaisePropertyChanged("propertySets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.ActionCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.RentStandard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.MoneyCard))]
    public partial class Card : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid cardGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cardTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.CardType cardTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int cardValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid cardGuid {
            get {
                return this.cardGuidField;
            }
            set {
                if ((this.cardGuidField.Equals(value) != true)) {
                    this.cardGuidField = value;
                    this.RaisePropertyChanged("cardGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardID {
            get {
                return this.cardIDField;
            }
            set {
                if ((this.cardIDField.Equals(value) != true)) {
                    this.cardIDField = value;
                    this.RaisePropertyChanged("cardID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardName {
            get {
                return this.cardNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cardNameField, value) != true)) {
                    this.cardNameField = value;
                    this.RaisePropertyChanged("cardName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cardText {
            get {
                return this.cardTextField;
            }
            set {
                if ((object.ReferenceEquals(this.cardTextField, value) != true)) {
                    this.cardTextField = value;
                    this.RaisePropertyChanged("cardText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.CardType cardType {
            get {
                return this.cardTypeField;
            }
            set {
                if ((this.cardTypeField.Equals(value) != true)) {
                    this.cardTypeField = value;
                    this.RaisePropertyChanged("cardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int cardValue {
            get {
                return this.cardValueField;
            }
            set {
                if ((this.cardValueField.Equals(value) != true)) {
                    this.cardValueField = value;
                    this.RaisePropertyChanged("cardValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DrawOnTurnStart", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class DrawOnTurnStart : MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool bField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool b {
            get {
                return this.bField;
            }
            set {
                if ((this.bField.Equals(value) != true)) {
                    this.bField = value;
                    this.RaisePropertyChanged("b");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TurnActionTypes", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum TurnActionTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        gameStarted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        turnStarted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        drawTwoCardsAtStartOfTurn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        drawFiveCardsAtStartOfTurn = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EndTurn = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SwitchAroundPlayedProperties = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayCard = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayPropertyCard = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BankMoneyCard = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayActionCard = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BankActionCard = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PlayJustSayNo = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AdknowlegeRecievedCurrentState = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_1_Card = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_2_Cards = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_3_Cards = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_4_Cards = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Discard_5_Cards = 17,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerBank", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerBank : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInBankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInBank {
            get {
                return this.cardsInBankField;
            }
            set {
                if ((object.ReferenceEquals(this.cardsInBankField, value) != true)) {
                    this.cardsInBankField = value;
                    this.RaisePropertyChanged("cardsInBank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerGuid {
            get {
                return this.playerGuidField;
            }
            set {
                if ((this.playerGuidField.Equals(value) != true)) {
                    this.playerGuidField = value;
                    this.RaisePropertyChanged("playerGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerHand", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerHand : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInHandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsInHand {
            get {
                return this.cardsInHandField;
            }
            set {
                if ((object.ReferenceEquals(this.cardsInHandField, value) != true)) {
                    this.cardsInHandField = value;
                    this.RaisePropertyChanged("cardsInHand");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerGuid {
            get {
                return this.playerGuidField;
            }
            set {
                if ((this.playerGuidField.Equals(value) != true)) {
                    this.playerGuidField = value;
                    this.RaisePropertyChanged("playerGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerPropertySets", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayerPropertySets : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet[] playersPropertySetsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerGuid {
            get {
                return this.playerGuidField;
            }
            set {
                if ((this.playerGuidField.Equals(value) != true)) {
                    this.playerGuidField = value;
                    this.RaisePropertyChanged("playerGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet[] playersPropertySets {
            get {
                return this.playersPropertySetsField;
            }
            set {
                if ((object.ReferenceEquals(this.playersPropertySetsField, value) != true)) {
                    this.playersPropertySetsField = value;
                    this.RaisePropertyChanged("playersPropertySets");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionCard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.RentStandard))]
    public partial class ActionCard : MDWcfWFClient.MonopolyDealServiceReference.Card {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MonetaryValueOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction actionTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool MonetaryValueOnly {
            get {
                return this.MonetaryValueOnlyField;
            }
            set {
                if ((this.MonetaryValueOnlyField.Equals(value) != true)) {
                    this.MonetaryValueOnlyField = value;
                    this.RaisePropertyChanged("MonetaryValueOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction actionType {
            get {
                return this.actionTypeField;
            }
            set {
                if ((this.actionTypeField.Equals(value) != true)) {
                    this.actionTypeField = value;
                    this.RaisePropertyChanged("actionType");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RentStandard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class RentStandard : MDWcfWFClient.MonopolyDealServiceReference.ActionCard {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorUpField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorDown {
            get {
                return this.colorDownField;
            }
            set {
                if ((this.colorDownField.Equals(value) != true)) {
                    this.colorDownField = value;
                    this.RaisePropertyChanged("colorDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor colorUp {
            get {
                return this.colorUpField;
            }
            set {
                if ((this.colorUpField.Equals(value) != true)) {
                    this.colorUpField = value;
                    this.RaisePropertyChanged("colorUp");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyCard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PropertyCard : MDWcfWFClient.MonopolyDealServiceReference.Card {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int currentColorSetCompleteSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor currentPropertyColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int downSetSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fiveCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fiveCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fiveCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isCardUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isMultiWildField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isWildField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int oneCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int oneCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int oneCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor[] propertyColorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threeCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threeCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threeCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoCardInSetRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoCardInSetRentValueDownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoCardInSetRentValueUpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int upSetSizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int currentColorSetCompleteSize {
            get {
                return this.currentColorSetCompleteSizeField;
            }
            set {
                if ((this.currentColorSetCompleteSizeField.Equals(value) != true)) {
                    this.currentColorSetCompleteSizeField = value;
                    this.RaisePropertyChanged("currentColorSetCompleteSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor currentPropertyColor {
            get {
                return this.currentPropertyColorField;
            }
            set {
                if ((this.currentPropertyColorField.Equals(value) != true)) {
                    this.currentPropertyColorField = value;
                    this.RaisePropertyChanged("currentPropertyColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int downSetSize {
            get {
                return this.downSetSizeField;
            }
            set {
                if ((this.downSetSizeField.Equals(value) != true)) {
                    this.downSetSizeField = value;
                    this.RaisePropertyChanged("downSetSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fiveCardInSetRentValue {
            get {
                return this.fiveCardInSetRentValueField;
            }
            set {
                if ((this.fiveCardInSetRentValueField.Equals(value) != true)) {
                    this.fiveCardInSetRentValueField = value;
                    this.RaisePropertyChanged("fiveCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fiveCardInSetRentValueDown {
            get {
                return this.fiveCardInSetRentValueDownField;
            }
            set {
                if ((this.fiveCardInSetRentValueDownField.Equals(value) != true)) {
                    this.fiveCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("fiveCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fiveCardInSetRentValueUp {
            get {
                return this.fiveCardInSetRentValueUpField;
            }
            set {
                if ((this.fiveCardInSetRentValueUpField.Equals(value) != true)) {
                    this.fiveCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("fiveCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourCardInSetRentValue {
            get {
                return this.fourCardInSetRentValueField;
            }
            set {
                if ((this.fourCardInSetRentValueField.Equals(value) != true)) {
                    this.fourCardInSetRentValueField = value;
                    this.RaisePropertyChanged("fourCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourCardInSetRentValueDown {
            get {
                return this.fourCardInSetRentValueDownField;
            }
            set {
                if ((this.fourCardInSetRentValueDownField.Equals(value) != true)) {
                    this.fourCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("fourCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourCardInSetRentValueUp {
            get {
                return this.fourCardInSetRentValueUpField;
            }
            set {
                if ((this.fourCardInSetRentValueUpField.Equals(value) != true)) {
                    this.fourCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("fourCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isCardUp {
            get {
                return this.isCardUpField;
            }
            set {
                if ((this.isCardUpField.Equals(value) != true)) {
                    this.isCardUpField = value;
                    this.RaisePropertyChanged("isCardUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isMultiWild {
            get {
                return this.isMultiWildField;
            }
            set {
                if ((this.isMultiWildField.Equals(value) != true)) {
                    this.isMultiWildField = value;
                    this.RaisePropertyChanged("isMultiWild");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isWild {
            get {
                return this.isWildField;
            }
            set {
                if ((this.isWildField.Equals(value) != true)) {
                    this.isWildField = value;
                    this.RaisePropertyChanged("isWild");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int oneCardInSetRentValue {
            get {
                return this.oneCardInSetRentValueField;
            }
            set {
                if ((this.oneCardInSetRentValueField.Equals(value) != true)) {
                    this.oneCardInSetRentValueField = value;
                    this.RaisePropertyChanged("oneCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int oneCardInSetRentValueDown {
            get {
                return this.oneCardInSetRentValueDownField;
            }
            set {
                if ((this.oneCardInSetRentValueDownField.Equals(value) != true)) {
                    this.oneCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("oneCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int oneCardInSetRentValueUp {
            get {
                return this.oneCardInSetRentValueUpField;
            }
            set {
                if ((this.oneCardInSetRentValueUpField.Equals(value) != true)) {
                    this.oneCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("oneCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor[] propertyColors {
            get {
                return this.propertyColorsField;
            }
            set {
                if ((object.ReferenceEquals(this.propertyColorsField, value) != true)) {
                    this.propertyColorsField = value;
                    this.RaisePropertyChanged("propertyColors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threeCardInSetRentValue {
            get {
                return this.threeCardInSetRentValueField;
            }
            set {
                if ((this.threeCardInSetRentValueField.Equals(value) != true)) {
                    this.threeCardInSetRentValueField = value;
                    this.RaisePropertyChanged("threeCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threeCardInSetRentValueDown {
            get {
                return this.threeCardInSetRentValueDownField;
            }
            set {
                if ((this.threeCardInSetRentValueDownField.Equals(value) != true)) {
                    this.threeCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("threeCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threeCardInSetRentValueUp {
            get {
                return this.threeCardInSetRentValueUpField;
            }
            set {
                if ((this.threeCardInSetRentValueUpField.Equals(value) != true)) {
                    this.threeCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("threeCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoCardInSetRentValue {
            get {
                return this.twoCardInSetRentValueField;
            }
            set {
                if ((this.twoCardInSetRentValueField.Equals(value) != true)) {
                    this.twoCardInSetRentValueField = value;
                    this.RaisePropertyChanged("twoCardInSetRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoCardInSetRentValueDown {
            get {
                return this.twoCardInSetRentValueDownField;
            }
            set {
                if ((this.twoCardInSetRentValueDownField.Equals(value) != true)) {
                    this.twoCardInSetRentValueDownField = value;
                    this.RaisePropertyChanged("twoCardInSetRentValueDown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoCardInSetRentValueUp {
            get {
                return this.twoCardInSetRentValueUpField;
            }
            set {
                if ((this.twoCardInSetRentValueUpField.Equals(value) != true)) {
                    this.twoCardInSetRentValueUpField = value;
                    this.RaisePropertyChanged("twoCardInSetRentValueUp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int upSetSize {
            get {
                return this.upSetSizeField;
            }
            set {
                if ((this.upSetSizeField.Equals(value) != true)) {
                    this.upSetSizeField = value;
                    this.RaisePropertyChanged("upSetSize");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MoneyCard", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class MoneyCard : MDWcfWFClient.MonopolyDealServiceReference.Card {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardType", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum CardType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Action = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Property = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WildProperty = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Money = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionCardAction", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum ActionCardAction : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SlyDeal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForcedDeal = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DealBreaker = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        JustSayNo = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DebtCollector = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItsMyBirthday = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RentMultiColor = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RentStandard = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DoubleTheRent = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        House = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hotel = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PassGo = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyColor", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum PropertyColor : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Brown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LightBlue = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pink = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Orange = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Red = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Yellow = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Green = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Blue = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Station = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Utilities = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_LightBlue_Brown = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_LightBlue_Station = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Pink_Orange = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Red_Yellow = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Blue_Green = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Green_Station = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_Station_Utility = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wild_MultiColored = 17,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertyCardSet", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PropertyCardSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool hasHotelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool hasHouseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card hotelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card houseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyCard[] propertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor propertySetColorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool hasHotel {
            get {
                return this.hasHotelField;
            }
            set {
                if ((this.hasHotelField.Equals(value) != true)) {
                    this.hasHotelField = value;
                    this.RaisePropertyChanged("hasHotel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool hasHouse {
            get {
                return this.hasHouseField;
            }
            set {
                if ((this.hasHouseField.Equals(value) != true)) {
                    this.hasHouseField = value;
                    this.RaisePropertyChanged("hasHouse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card hotel {
            get {
                return this.hotelField;
            }
            set {
                if ((object.ReferenceEquals(this.hotelField, value) != true)) {
                    this.hotelField = value;
                    this.RaisePropertyChanged("hotel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card house {
            get {
                return this.houseField;
            }
            set {
                if ((object.ReferenceEquals(this.houseField, value) != true)) {
                    this.houseField = value;
                    this.RaisePropertyChanged("house");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyCard[] properties {
            get {
                return this.propertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.propertiesField, value) != true)) {
                    this.propertiesField = value;
                    this.RaisePropertyChanged("properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor propertySetColor {
            get {
                return this.propertySetColorField;
            }
            set {
                if ((this.propertySetColorField.Equals(value) != true)) {
                    this.propertySetColorField = value;
                    this.RaisePropertyChanged("propertySetColor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PollForFieldUpdateMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.TakeActionOnTurnMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.FieldUpdateMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.GuidBox))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Statephase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.TurnActionTypes[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.DrawOnTurnStart))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayerBank))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Card[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.Card))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.CardType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.RentStandard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.ActionCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.ActionCardAction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyColor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyColor[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.MoneyCard))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayerHand))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertyCard[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.MessageType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PlayPile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MDWcfWFClient.MonopolyDealServiceReference.PropertySetInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Guid[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(object[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Type))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Reflection.MemberInfo))]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid messageRespondingToGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.MessageType messageTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object[] objectsInMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerSendingMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] playersRecievingMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid serverGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool serviceSendingMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid thisMessageGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Type typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid messageRespondingToGuid {
            get {
                return this.messageRespondingToGuidField;
            }
            set {
                if ((this.messageRespondingToGuidField.Equals(value) != true)) {
                    this.messageRespondingToGuidField = value;
                    this.RaisePropertyChanged("messageRespondingToGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.MessageType messageType {
            get {
                return this.messageTypeField;
            }
            set {
                if ((this.messageTypeField.Equals(value) != true)) {
                    this.messageTypeField = value;
                    this.RaisePropertyChanged("messageType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object[] objectsInMessage {
            get {
                return this.objectsInMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.objectsInMessageField, value) != true)) {
                    this.objectsInMessageField = value;
                    this.RaisePropertyChanged("objectsInMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerSendingMessage {
            get {
                return this.playerSendingMessageField;
            }
            set {
                if ((this.playerSendingMessageField.Equals(value) != true)) {
                    this.playerSendingMessageField = value;
                    this.RaisePropertyChanged("playerSendingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] playersRecievingMessage {
            get {
                return this.playersRecievingMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.playersRecievingMessageField, value) != true)) {
                    this.playersRecievingMessageField = value;
                    this.RaisePropertyChanged("playersRecievingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid serverGuid {
            get {
                return this.serverGuidField;
            }
            set {
                if ((this.serverGuidField.Equals(value) != true)) {
                    this.serverGuidField = value;
                    this.RaisePropertyChanged("serverGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool serviceSendingMessage {
            get {
                return this.serviceSendingMessageField;
            }
            set {
                if ((this.serviceSendingMessageField.Equals(value) != true)) {
                    this.serviceSendingMessageField = value;
                    this.RaisePropertyChanged("serviceSendingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid thisMessageGuid {
            get {
                return this.thisMessageGuidField;
            }
            set {
                if ((this.thisMessageGuidField.Equals(value) != true)) {
                    this.thisMessageGuidField = value;
                    this.RaisePropertyChanged("thisMessageGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Type type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PollForFieldUpdateMessage", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PollForFieldUpdateMessage : MDWcfWFClient.MonopolyDealServiceReference.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel actionsToTakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel fieldModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid fieldModelGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid referenceThisGuidToRespondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel actionsToTake {
            get {
                return this.actionsToTakeField;
            }
            set {
                if ((object.ReferenceEquals(this.actionsToTakeField, value) != true)) {
                    this.actionsToTakeField = value;
                    this.RaisePropertyChanged("actionsToTake");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel fieldModel {
            get {
                return this.fieldModelField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldModelField, value) != true)) {
                    this.fieldModelField = value;
                    this.RaisePropertyChanged("fieldModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid fieldModelGuid {
            get {
                return this.fieldModelGuidField;
            }
            set {
                if ((this.fieldModelGuidField.Equals(value) != true)) {
                    this.fieldModelGuidField = value;
                    this.RaisePropertyChanged("fieldModelGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid referenceThisGuidToRespond {
            get {
                return this.referenceThisGuidToRespondField;
            }
            set {
                if ((this.referenceThisGuidToRespondField.Equals(value) != true)) {
                    this.referenceThisGuidToRespondField = value;
                    this.RaisePropertyChanged("referenceThisGuidToRespond");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TakeActionOnTurnMessage", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class TakeActionOnTurnMessage : MDWcfWFClient.MonopolyDealServiceReference.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel actionsToTakeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel fieldModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid fieldModelGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid referenceThisGuidToRespondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel actionsToTake {
            get {
                return this.actionsToTakeField;
            }
            set {
                if ((object.ReferenceEquals(this.actionsToTakeField, value) != true)) {
                    this.actionsToTakeField = value;
                    this.RaisePropertyChanged("actionsToTake");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel fieldModel {
            get {
                return this.fieldModelField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldModelField, value) != true)) {
                    this.fieldModelField = value;
                    this.RaisePropertyChanged("fieldModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid fieldModelGuid {
            get {
                return this.fieldModelGuidField;
            }
            set {
                if ((this.fieldModelGuidField.Equals(value) != true)) {
                    this.fieldModelGuidField = value;
                    this.RaisePropertyChanged("fieldModelGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid referenceThisGuidToRespond {
            get {
                return this.referenceThisGuidToRespondField;
            }
            set {
                if ((this.referenceThisGuidToRespondField.Equals(value) != true)) {
                    this.referenceThisGuidToRespondField = value;
                    this.RaisePropertyChanged("referenceThisGuidToRespond");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FieldUpdateMessage", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class FieldUpdateMessage : MDWcfWFClient.MonopolyDealServiceReference.Message {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel fieldModelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid referenceThisGuidToRespondField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel fieldModel {
            get {
                return this.fieldModelField;
            }
            set {
                if ((object.ReferenceEquals(this.fieldModelField, value) != true)) {
                    this.fieldModelField = value;
                    this.RaisePropertyChanged("fieldModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid referenceThisGuidToRespond {
            get {
                return this.referenceThisGuidToRespondField;
            }
            set {
                if ((this.referenceThisGuidToRespondField.Equals(value) != true)) {
                    this.referenceThisGuidToRespondField = value;
                    this.RaisePropertyChanged("referenceThisGuidToRespond");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageType", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    public enum MessageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        notify = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        sendChat = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        recieveChat = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        connect = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ready = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        gameStarted = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        playcard = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        fieldupdate = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        actionTaken = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        pollForFieldUpdate = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayPile", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PlayPile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.Card[] playPileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.Card[] playPile {
            get {
                return this.playPileField;
            }
            set {
                if ((object.ReferenceEquals(this.playPileField, value) != true)) {
                    this.playPileField = value;
                    this.RaisePropertyChanged("playPile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PropertySetInfo", Namespace="http://schemas.datacontract.org/2004/07/MDWcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class PropertySetInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int fourPropertyCardRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int hotelValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int houseValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberOfCardsInFullSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int onePropertyCardRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MDWcfWFClient.MonopolyDealServiceReference.PropertyColor propertyColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int threePropertyCardRentValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int twoPropertCardRentValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int fourPropertyCardRentValue {
            get {
                return this.fourPropertyCardRentValueField;
            }
            set {
                if ((this.fourPropertyCardRentValueField.Equals(value) != true)) {
                    this.fourPropertyCardRentValueField = value;
                    this.RaisePropertyChanged("fourPropertyCardRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int hotelValue {
            get {
                return this.hotelValueField;
            }
            set {
                if ((this.hotelValueField.Equals(value) != true)) {
                    this.hotelValueField = value;
                    this.RaisePropertyChanged("hotelValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int houseValue {
            get {
                return this.houseValueField;
            }
            set {
                if ((this.houseValueField.Equals(value) != true)) {
                    this.houseValueField = value;
                    this.RaisePropertyChanged("houseValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int numberOfCardsInFullSet {
            get {
                return this.numberOfCardsInFullSetField;
            }
            set {
                if ((this.numberOfCardsInFullSetField.Equals(value) != true)) {
                    this.numberOfCardsInFullSetField = value;
                    this.RaisePropertyChanged("numberOfCardsInFullSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int onePropertyCardRentValue {
            get {
                return this.onePropertyCardRentValueField;
            }
            set {
                if ((this.onePropertyCardRentValueField.Equals(value) != true)) {
                    this.onePropertyCardRentValueField = value;
                    this.RaisePropertyChanged("onePropertyCardRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MDWcfWFClient.MonopolyDealServiceReference.PropertyColor propertyColor {
            get {
                return this.propertyColorField;
            }
            set {
                if ((this.propertyColorField.Equals(value) != true)) {
                    this.propertyColorField = value;
                    this.RaisePropertyChanged("propertyColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int threePropertyCardRentValue {
            get {
                return this.threePropertyCardRentValueField;
            }
            set {
                if ((this.threePropertyCardRentValueField.Equals(value) != true)) {
                    this.threePropertyCardRentValueField = value;
                    this.RaisePropertyChanged("threePropertyCardRentValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int twoPropertCardRentValue {
            get {
                return this.twoPropertCardRentValueField;
            }
            set {
                if ((this.twoPropertCardRentValueField.Equals(value) != true)) {
                    this.twoPropertCardRentValueField = value;
                    this.RaisePropertyChanged("twoPropertCardRentValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonopolyDealServiceReference.IMonopolyDeal", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IMonopolyDeal {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/connectToService", ReplyAction="http://tempuri.org/IMonopolyDeal/connectToServiceResponse")]
        System.Guid connectToService(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/startGame", ReplyAction="http://tempuri.org/IMonopolyDeal/startGameResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.GuidBox startGame(MDWcfWFClient.MonopolyDealServiceReference.GuidBox guidBoxed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/pollState", ReplyAction="http://tempuri.org/IMonopolyDeal/pollStateResponse")]
        MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel pollState(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/draw2AtStartOfTurn", ReplyAction="http://tempuri.org/IMonopolyDeal/draw2AtStartOfTurnResponse")]
        bool draw2AtStartOfTurn(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playCardFromHandToBank", ReplyAction="http://tempuri.org/IMonopolyDeal/playCardFromHandToBankResponse")]
        bool playCardFromHandToBank(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playActionCardOnTurn", ReplyAction="http://tempuri.org/IMonopolyDeal/playActionCardOnTurnResponse")]
        bool playActionCardOnTurn(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerTargeted, MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsTargeted, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playWildRentActionCardOnTurn", ReplyAction="http://tempuri.org/IMonopolyDeal/playWildRentActionCardOnTurnResponse")]
        bool playWildRentActionCardOnTurn(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerTargeted, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setOfPropertiesToRentOn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playStandardRentActionCardOnTurn", ReplyAction="http://tempuri.org/IMonopolyDeal/playStandardRentActionCardOnTurnResponse")]
        bool playStandardRentActionCardOnTurn(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setOfPropertiesToRentOn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playJustSayNo", ReplyAction="http://tempuri.org/IMonopolyDeal/playJustSayNoResponse")]
        bool playJustSayNo(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playPropertyCard", ReplyAction="http://tempuri.org/IMonopolyDeal/playPropertyCardResponse")]
        bool playPropertyCard(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setToPlayPropertyTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/playPropertyCardNewSet", ReplyAction="http://tempuri.org/IMonopolyDeal/playPropertyCardNewSetResponse")]
        bool playPropertyCardNewSet(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/movePropertyCard", ReplyAction="http://tempuri.org/IMonopolyDeal/movePropertyCardResponse")]
        bool movePropertyCard(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card propertyCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet oldSet, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setToPlayPropertyTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/payCards", ReplyAction="http://tempuri.org/IMonopolyDeal/payCardsResponse")]
        bool payCards(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerPaying, MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerRecieving, MDWcfWFClient.MonopolyDealServiceReference.Card[] cards, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/endTurn", ReplyAction="http://tempuri.org/IMonopolyDeal/endTurnResponse")]
        bool endTurn(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/discard", ReplyAction="http://tempuri.org/IMonopolyDeal/discardResponse")]
        bool discard(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsToDiscard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/hasGameStarted", ReplyAction="http://tempuri.org/IMonopolyDeal/hasGameStartedResponse")]
        bool hasGameStarted(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonopolyDeal/referenceAllDataContracts", ReplyAction="http://tempuri.org/IMonopolyDeal/referenceAllDataContractsResponse")]
        void referenceAllDataContracts(
                    MDWcfWFClient.MonopolyDealServiceReference.ActionCard ac, 
                    MDWcfWFClient.MonopolyDealServiceReference.Card c, 
                    MDWcfWFClient.MonopolyDealServiceReference.FieldUpdateMessage fum, 
                    MDWcfWFClient.MonopolyDealServiceReference.Message msg, 
                    MDWcfWFClient.MonopolyDealServiceReference.MoneyCard mc, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerBank pb, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerHand ph, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerModel pm, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets pps, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel pfm, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayPile pp, 
                    MDWcfWFClient.MonopolyDealServiceReference.PollForFieldUpdateMessage pffum, 
                    MDWcfWFClient.MonopolyDealServiceReference.PropertyCard pc, 
                    MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet pcs, 
                    MDWcfWFClient.MonopolyDealServiceReference.PropertySetInfo psi, 
                    MDWcfWFClient.MonopolyDealServiceReference.RentStandard rs, 
                    MDWcfWFClient.MonopolyDealServiceReference.TakeActionOnTurnMessage taotm, 
                    MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel tam);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonopolyDealChannel : MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonopolyDealClient : System.ServiceModel.ClientBase<MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal>, MDWcfWFClient.MonopolyDealServiceReference.IMonopolyDeal {
        
        public MonopolyDealClient() {
        }
        
        public MonopolyDealClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonopolyDealClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonopolyDealClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonopolyDealClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid connectToService(string name) {
            return base.Channel.connectToService(name);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.GuidBox startGame(MDWcfWFClient.MonopolyDealServiceReference.GuidBox guidBoxed) {
            return base.Channel.startGame(guidBoxed);
        }
        
        public MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel pollState(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox gameGuid) {
            return base.Channel.pollState(playerGuid, gameGuid);
        }
        
        public bool draw2AtStartOfTurn(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.draw2AtStartOfTurn(playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playCardFromHandToBank(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playCardFromHandToBank(playedCardID, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playActionCardOnTurn(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerTargeted, MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsTargeted, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playActionCardOnTurn(player, playedCard, playerTargeted, cardsTargeted, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playWildRentActionCardOnTurn(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerTargeted, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setOfPropertiesToRentOn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playWildRentActionCardOnTurn(player, playedCard, playerTargeted, setOfPropertiesToRentOn, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playStandardRentActionCardOnTurn(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setOfPropertiesToRentOn, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playStandardRentActionCardOnTurn(player, playedCard, setOfPropertiesToRentOn, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playJustSayNo(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playJustSayNo(player, playedCard, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playPropertyCard(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card playedCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setToPlayPropertyTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.playPropertyCard(player, playedCard, setToPlayPropertyTo, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool playPropertyCardNewSet(int playedCardID, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.playPropertyCardNewSet(playedCardID, playerGuid, serverGuid, playfieldModelInstanceGuid);
        }
        
        public bool movePropertyCard(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card propertyCard, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet oldSet, MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet setToPlayPropertyTo, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.movePropertyCard(player, propertyCard, oldSet, setToPlayPropertyTo, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool payCards(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerPaying, MDWcfWFClient.MonopolyDealServiceReference.PlayerModel playerRecieving, MDWcfWFClient.MonopolyDealServiceReference.Card[] cards, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.payCards(playerPaying, playerRecieving, cards, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool endTurn(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid) {
            return base.Channel.endTurn(playerGuid, serverGuid, playfieldModelInstanceGuid);
        }
        
        public bool discard(MDWcfWFClient.MonopolyDealServiceReference.PlayerModel player, MDWcfWFClient.MonopolyDealServiceReference.Card[] cardsToDiscard, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox playfieldModelInstanceGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox turnActionGuid) {
            return base.Channel.discard(player, cardsToDiscard, playerGuid, serverGuid, playfieldModelInstanceGuid, turnActionGuid);
        }
        
        public bool hasGameStarted(MDWcfWFClient.MonopolyDealServiceReference.GuidBox playerGuid, MDWcfWFClient.MonopolyDealServiceReference.GuidBox serverGuid) {
            return base.Channel.hasGameStarted(playerGuid, serverGuid);
        }
        
        public void referenceAllDataContracts(
                    MDWcfWFClient.MonopolyDealServiceReference.ActionCard ac, 
                    MDWcfWFClient.MonopolyDealServiceReference.Card c, 
                    MDWcfWFClient.MonopolyDealServiceReference.FieldUpdateMessage fum, 
                    MDWcfWFClient.MonopolyDealServiceReference.Message msg, 
                    MDWcfWFClient.MonopolyDealServiceReference.MoneyCard mc, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerBank pb, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerHand ph, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerModel pm, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayerPropertySets pps, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayFieldModel pfm, 
                    MDWcfWFClient.MonopolyDealServiceReference.PlayPile pp, 
                    MDWcfWFClient.MonopolyDealServiceReference.PollForFieldUpdateMessage pffum, 
                    MDWcfWFClient.MonopolyDealServiceReference.PropertyCard pc, 
                    MDWcfWFClient.MonopolyDealServiceReference.PropertyCardSet pcs, 
                    MDWcfWFClient.MonopolyDealServiceReference.PropertySetInfo psi, 
                    MDWcfWFClient.MonopolyDealServiceReference.RentStandard rs, 
                    MDWcfWFClient.MonopolyDealServiceReference.TakeActionOnTurnMessage taotm, 
                    MDWcfWFClient.MonopolyDealServiceReference.TurnActionModel tam) {
            base.Channel.referenceAllDataContracts(ac, c, fum, msg, mc, pb, ph, pm, pps, pfm, pp, pffum, pc, pcs, psi, rs, taotm, tam);
        }
    }
}
